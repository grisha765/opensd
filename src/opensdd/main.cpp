////////////////////////////////////////////////////////////////////////////////////////////////////
//  OpenSD
//  An open-source userspace driver for Valve's Steam Deck hardware
//
//  Copyright (C) 2022-2024 Daniel Nguyen
//  https://codeberg.org/opensd/opensd
//  Licensed under the GNU GPLv3+
//
//  This program is free software: you can redistribute it and/or modify it under the terms of the 
//  GNU General Public License as published by the Free Software Foundation, either version 3 of 
//  the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
//  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
//  See the GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along with this program. 
//  If not, see <https://www.gnu.org/licenses/>.             
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../common/log.hpp"
#include "../common/prog_args.hpp"
#include "daemon.hpp"
#include "filemgr.hpp"
// Generated by cmake
#include "cmake_vars.hpp"
// C++
#include <vector>
#include <string>
#include <iostream>



const std::string   INFO_BLOCK      =
{
    "OpenSD daemon\n"
    "Copyright (C) 2022-2024 Daniel Nguyen\n"
    "Version " + CMakeVar::VERSION_STR + "\n"
    "https://codeberg.org/opensd/opensd\n"
    "Licensed under the GNU GPLv3+\n"
};



const std::string   LICENSE_BLOCK =
{
    "    This program comes with ABSOLUTELY NO WARRANTY.\n"
    "    This is free software, and you are welcome to redistribute it under certain\n"
    "    conditions.  For full license, see https://www.gnu.org/licenses/gpl-3.0.txt\n"
};



const std::string   HELP_BLOCK =
{
    "  Usage:  opensdd [options]\n"
    "\n"
    "    -h --help                  Show this help message.\n"
    "    -v --version               Output version number and exit.\n"
    "    -q --quiet                 Don't show program info.\n"
    "    -l --log-level <level>     Set minumum logging level.  Default: 'warn'\n"
    "                               Valid options are:\n"
    "                                 verbose, debug, info, warn, error\n"
    "    -p --profile <profile>     Force load a specific profile on startup.\n"
    "       --list-profiles         Print list of available profiles and exit.\n"
};



void ShowInfoLine()
{
    std::cout << INFO_BLOCK << std::endl;
    std::cout << LICENSE_BLOCK << std::endl;
}



void ShowHelp()
{
    std::cout << HELP_BLOCK << std::endl;
}



void ShowVersion()
{
    std::cout << CMakeVar::VERSION_STR << std::endl;
}



int ListProfiles()
{
    FileMgr                     file_mgr;
    int                         result;
    std::vector<std::string>    list;
    
    // Initialize file manager
    gLog.Write( Log::INFO, "Initializing file manager..." );
    result = file_mgr.Init();
    if (result != Err::OK)
    {
        gLog.Write( Log::ERROR, "Failed to initialize file manager..." );
        return Err::INIT_FAILED;
    }
    
    list = file_mgr.GetProfileList();
    if (list.empty())
    {
        gLog.Write( Log::ERROR, "No profiles found!" );
        return Err::OK;
    }

    for (auto const& s : list)
    {
        std::cout << s << std::endl;
    }

    return Err::OK;
}



int main( int argc, char **argv )
{
    std::vector<std::string>    arg_list( argv, argv + argc );
    Daemon                      opensdd;
    ProgArgs                    args( arg_list );
    std::string                 opt_param;

    // No longer needed
    arg_list.clear();
    
    // Set initial Logging level
    gLog.SetFilterLevel( Log::WARN );

    /// Handle command line arguments
    
    // Version
    if (args.HasOpt( "v", "version" ))
    {
        ShowVersion();
        return 0;
    }

    // Suppress info output
    if (!args.PopOpt( "q", "quiet" ))
    {
        ShowInfoLine();
    }
    
    // CLI help
    if (args.HasOpt( "h", "help" ))
    {
        ShowHelp();
        return 0;
    }
    
    // Logging level
    if (args.PopOpt( "l", "log-level", opt_param ))
    {
        std::vector<std::string>    levels = { "verb", "verbose", "debug", "info", "warn", "warning", "error" }; 
        unsigned int                i = 0;

        // Check if level is set after option
        if (opt_param.empty())
        {
            std::cout << "Missing log-level parameter. Run again with --help for usage.\n";
            return -1;
        }
        
        for (auto& s : levels)
        {
            if (opt_param == s)
                break;
            ++i;
        }

        switch (i)
        {
            case 0: // verb
            case 1: // verbose
                gLog.SetFilterLevel( Log::VERB );
            break;
            
            case 2: // debug
                gLog.SetFilterLevel( Log::DEBUG);
            break;
            
            case 3: // info
                gLog.SetFilterLevel( Log::INFO );
            break;
            
            case 4: // warn
            case 5: // warning
                gLog.SetFilterLevel( Log::WARN );
            break;
            
            case 6: // error
                gLog.SetFilterLevel( Log::ERROR );
            break;

            default:  // Unknown
                std::cout << "Invalid log-level parameter '" << opt_param.c_str() << "'. Run again with --help for usage.\n";
                return -1;
            break;
        }
    }

    // List profiles
    if (args.HasOpt( "", "list-profiles" ))
    {
        return ListProfiles();
    }

    // Startup profile override
    if (args.PopOpt( "p", "profile", opt_param ))
    {
        if (opt_param.empty())
        {
            std::cout << "Missing profile parameter. Run again with --help for usage.\n";
            return -1;
        }

        opensdd.SetStartupProfile( opt_param );
    }

    /// Done checking program args
    
    // Exit if there were argument parsing errors
    if (args.GetErrorCount())
    {
        std::cout << "Error(s) occurred parsing arguments. Run again with --help for usage.\n";
        return -1;
    }

    // Valid args should have been popped, so any remaining args are invalid
    if (args.GetArgCount())
    {
        std::cout << "Invalid syntax or unknown argument. Run again with --help for usage.\n";
        return -1;
    }
    
    // Run daemon and exit
    return opensdd.Run();
}
